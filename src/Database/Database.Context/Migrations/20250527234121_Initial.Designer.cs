// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Context.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20250527234121_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Models.CompanyDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("inn");

                    b.Property<string>("Kpp")
                        .IsRequired()
                        .HasColumnType("varchar(9)")
                        .HasColumnName("kpp");

                    b.Property<string>("Ogrn")
                        .IsRequired()
                        .HasColumnType("varchar(13)")
                        .HasColumnName("ogrn");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("phone");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registration_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Inn")
                        .IsUnique();

                    b.HasIndex("Kpp")
                        .IsUnique();

                    b.HasIndex("Ogrn")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("company", null, t =>
                        {
                            t.HasCheckConstraint("EmailCheck", "email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'");

                            t.HasCheckConstraint("InnCheck", "inn ~ '^[0-9]{10}$'");

                            t.HasCheckConstraint("KppCheck", "kpp ~ '^[0-9]{9}$'");

                            t.HasCheckConstraint("OgrnChek", "ogrn ~ '^[0-9]{13}$'");

                            t.HasCheckConstraint("PhoneNumberCheck", "phone ~ '^\\+[0-9]{1,3}[0-9]{4,14}$'");

                            t.HasCheckConstraint("RegistrationDateCheck", "registration_date <= CURRENT_DATE");
                        });
                });

            modelBuilder.Entity("Database.Models.EducationDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("institution");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("education_level");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("StudyField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("study_field");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("education", null, t =>
                        {
                            t.HasCheckConstraint("education_level_check", "education_level in ('Высшее (бакалавриат)', 'Высшее (магистратура)', 'Высшее (специалитет)', 'Среднее профессиональное (ПКР)', 'Среднее профессиональное (ПССЗ)','Программы переподготовки', 'Курсы повышения квалификации' )");

                            t.HasCheckConstraint("end_date_check", "end_date < CURRENT_DATE");

                            t.HasCheckConstraint("start_date_check", "start_date < CURRENT_DATE");
                        });
                });

            modelBuilder.Entity("Database.Models.EmployeeDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Duties")
                        .HasColumnType("jsonb")
                        .HasColumnName("duties");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("phone");

                    b.Property<string>("Photo")
                        .HasColumnType("text")
                        .HasColumnName("photo");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("Photo")
                        .IsUnique();

                    b.ToTable("employee_base", null, t =>
                        {
                            t.HasCheckConstraint("BirthDateCheck", "birth_date < CURRENT_DATE");

                            t.HasCheckConstraint("EmailCheck", "email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'");

                            t.HasCheckConstraint("PhoneCheck", "phone ~ '^\\+[0-9]{1,3}[0-9]{4,14}$'");
                        });
                });

            modelBuilder.Entity("Database.Models.PositionDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentId");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("Database.Models.PositionHierarchyDb", b =>
                {
                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Database.Models.PositionHierarchyWithEmployeeIdDb", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("Database.Models.PostDb", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("salary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("post", null, t =>
                        {
                            t.HasCheckConstraint("salary_check", "salary > 0");
                        });
                });

            modelBuilder.Entity("Database.Models.PostHistoryDb", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<Guid?>("EmployeeDbId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("PostDbId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("PostId", "EmployeeId");

                    b.HasIndex("EmployeeDbId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PostDbId");

                    b.ToTable("post_history", null, t =>
                        {
                            t.HasCheckConstraint("CK_post_history_end_date", "end_date <= CURRENT_DATE");

                            t.HasCheckConstraint("CK_post_history_start_date", "start_date < CURRENT_DATE");
                        });
                });

            modelBuilder.Entity("Database.Models.ScoreDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<int>("CompetencyScore")
                        .HasColumnType("integer")
                        .HasColumnName("competency_score");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("EfficiencyScore")
                        .HasColumnType("integer")
                        .HasColumnName("efficiency_score");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<int>("EngagementScore")
                        .HasColumnType("integer")
                        .HasColumnName("engagement_score");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionId");

                    b.ToTable("score_story", null, t =>
                        {
                            t.HasCheckConstraint("CK_ScoreStory_CompetencyScore", "competency_score > 0 AND competency_score < 6");

                            t.HasCheckConstraint("CK_ScoreStory_EfficiencyScore", "efficiency_score > 0 AND efficiency_score < 6");

                            t.HasCheckConstraint("CK_ScoreStory_EngagementScore", "engagement_score > 0 AND engagement_score < 6");
                        });
                });

            modelBuilder.Entity("Project.Database.Models.PositionHistoryDb", b =>
                {
                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid")
                        .HasColumnName("employee_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("PositionId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("position_history", null, t =>
                        {
                            t.HasCheckConstraint("CK_position_history_end_date", "end_date <= CURRENT_DATE");

                            t.HasCheckConstraint("CK_position_history_start_date", "start_date < CURRENT_DATE");
                        });
                });

            modelBuilder.Entity("Database.Models.EducationDb", b =>
                {
                    b.HasOne("Database.Models.EmployeeDb", null)
                        .WithMany("Educations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.PositionDb", b =>
                {
                    b.HasOne("Database.Models.CompanyDb", null)
                        .WithMany("Positions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.PositionDb", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Database.Models.PostDb", b =>
                {
                    b.HasOne("Database.Models.CompanyDb", null)
                        .WithMany("Posts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.PostHistoryDb", b =>
                {
                    b.HasOne("Database.Models.EmployeeDb", null)
                        .WithMany("PostHistories")
                        .HasForeignKey("EmployeeDbId");

                    b.HasOne("Database.Models.EmployeeDb", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.PostDb", null)
                        .WithMany("PostHistories")
                        .HasForeignKey("PostDbId");

                    b.HasOne("Database.Models.PostDb", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.ScoreDb", b =>
                {
                    b.HasOne("Database.Models.EmployeeDb", null)
                        .WithMany("AuthoredScores")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Database.Models.EmployeeDb", null)
                        .WithMany("Scores")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.PositionDb", null)
                        .WithMany("Scores")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Database.Models.PositionHistoryDb", b =>
                {
                    b.HasOne("Database.Models.EmployeeDb", null)
                        .WithMany("PositionHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Models.PositionDb", null)
                        .WithMany("PositionHistories")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.CompanyDb", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Database.Models.EmployeeDb", b =>
                {
                    b.Navigation("AuthoredScores");

                    b.Navigation("Educations");

                    b.Navigation("PositionHistories");

                    b.Navigation("PostHistories");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Database.Models.PositionDb", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("PositionHistories");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Database.Models.PostDb", b =>
                {
                    b.Navigation("PostHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
